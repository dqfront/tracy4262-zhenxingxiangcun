<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ovit.nswy.member.certification.mapper.CollectMapper">

	<select id="findCollectDictList" parameterType="map" resultType="map">
		select

			r.id,r.name as groupName,r.parent_id as pid

		from collect_dict r order by create_time desc

	</select>

	<select id="findCollectList" parameterType="map" resultType="map">
		select
		r.id,
		r.belong as account,
		r.template_id as templateId,
		r.group_name as groupName,
		r.pid,
		r.remark


		from collect r left join collect g on r.pid = g.id

		where 1=1
		<if test="account!= null and account!=''">
			and r.belong = #{account}
		</if>

		<if test="templateId!= null and templateId!=''">
			and r.template_id = #{templateId}
		</if>

		<if test="id!=null and id!=''">
			and r.id = #{id}
		</if>

		order by r.create_time desc
	</select>

	<select id="queryList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			*
		FROM
			collect
		WHERE
			belong = #{login_account}
		AND
			pid = 0
	</select>

	<select id="queryNext" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			*
		FROM
			collect
		WHERE
			pid = #{pid}
	</select>

	<update id="rename" parameterType="java.util.Map">
		UPDATE
			collect
		SET
			group_name = #{group_name}
		WHERE
			id = #{id}
	</update>

	<update id="renameRemark" parameterType="java.util.Map">
		UPDATE
			collect
		SET
			remark = #{remark}
		WHERE
			id = #{id}
	</update>

	<delete id="del" parameterType="java.util.Map">
		DELETE FROM collect WHERE id = #{id} ;
		DELETE FROM myfavorite WHERE collectId=#{id} AND account=#{account};
	</delete>

	<select id="being" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT
			COUNT(*)
		FROM
			collect
		WHERE
			pid = #{id}
	</select>

	<insert id="add" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO
			collect
		(
			group_name,
			remark,
			belong,
			pid,
			template_id
		)
		VALUES
		(
			#{group_name},
			#{remark},
			#{login_account},
			#{pid},
			#{templateId}
		)
	</insert>

	<select id="update"  parameterType="java.util.Map">
		update collect set group_name = #{group_name} where id = #{id}
	</select>

	<select id="queryListByPidAndAccount" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT id, group_name, remark, belong, pid, template_id as templateId FROM collect WHERE belong =#{account} AND pid = 0
		<if test="templateId != null and templateId != ''">
			AND template_id = #{templateId}
		</if>
	</select>

	<select id="queryChildNode" resultType="java.util.Map" parameterType="java.lang.Integer">
		SELECT * FROM collect where pid = #{id}
	</select>

	<select id="selectByAccountAndPidAndTitle" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT * FROM collect where pid = #{pid} and group_name = #{group_name} and belong = #{login_account}
		<if test="templateId != null and templateId != ''">
			AND template_id = #{templateId}
		</if>
	</select>

	<select id="findByName" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT * FROM collect where group_name = #{group_name} and belong = #{login_account}
	</select>

	<select id="findUserQueryList" parameterType="map" resultType="map">
		select id, group_name, remark, belong, pid, template_id as templateId from collect where  belong=#{account} AND template_id = #{templateId} ;
	</select>

	<select id="findMaxId" parameterType="map" resultType="java.lang.String">
		select max(id) as id from  collect
	</select>

	<select id="isExistData" parameterType="map" resultType="map">
		select * from myfavorite where collectId=#{id} AND account=#{account}
	</select>

</mapper>