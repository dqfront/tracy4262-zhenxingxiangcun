<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ovit.nswy.member.mapper.PerfectInformationMapper">

    <select id="findEducation" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT e.id,
            e.account,
            e.school_model,
            e.school_name,
            e.school_name_status,
            e.education_model,
            e.education,
            e.education_status,
            e.major_model,
            e.major,
            e.major_status,
            e.is_general_model,
            e.is_general,
            e.is_general_status,
            e.entrance_graduation_time_model,
            e.entrance_graduation_time,
            e.entrance_graduation_time_status
        FROM educational_experience e
        where 1=1
        <if test="account!=null and account!=''">
          and e.account  = #{account}
        </if>
        order  by e.update_time desc
    </select>
    
    <select id="findWork" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT w.id,
            w.account,
            w.work_unit_model,
            w.work_unit,
            w.work_unit_status,
            w.work_position_model,
            w.work_position,
            w.work_position_status,
            w.work_time_model,
            w.work_time,
            w.work_time_status,
            w.work_details_model,
            w.work_details,
            w.work_details_status
        FROM work_experience w
        where 1=1
        <if test="account!=null and account!=''">
            and w.account  = #{account}
        </if>
        order  by w.update_time desc
    </select>

    <select id="findWorkTime" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT w.id,
        w.account,
        w.work_unit_model,
        w.work_unit,
        w.work_unit_status,
        w.work_position_model,
        w.work_position,
        w.work_position_status,
        w.work_time_model,
        w.work_time,
        w.work_time_status,
        w.work_details_model,
        w.work_details,
        w.work_details_status
        FROM work_experience w
        where 1=1
        <if test="account!=null and account!=''">
            and w.account  = #{account}
        </if>

        order  by w.work_time_model desc
    </select>

    <select id="findHonor" parameterType="java.util.Map" resultType="java.util.Map">
        select h.account,h.title as name, h.introduce as content,h.file,h.honour_status
        from honor_info h where 1=1
        <if test="account!=null and account!=''">
            and h.account  = #{account}
        </if>
        order  by h.update_time desc
    </select>

    <select id="findTeam" parameterType="Map" resultType="Map">
        SELECT t.id,
            t.account,
            t.duties as job,
            t.name,
            t.education_level as educate,
            t.id_number as idCard,
            t.phone,
            t.image as avatar,
            t.image_introduce as intro,
            t.team_status
        FROM management_team t where 1=1
        <if test="account!=null and account!=''">
            and t.account  = #{account}
        </if>
        order  by t.update_time desc
    </select>

    <select id="findFinance" parameterType="java.util.Map" resultType="java.util.Map">
        select
            f.id,
            f.account,
            f.owner_equity as interests,
            f.fixed_assets_scale as assets,
            f.finance_status
        from finance_info f
        where 1=1
        <if test="account!=null and account!=''">
            and f.account  = #{account}
        </if>
        order  by f.update_time desc
    </select>

    <select id="findSysUserInfo" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT s.id,
            s.user_type,
            s.is_display,
            s.privacy_information,
            s.network_information,
            s.education_live,
            s.work_live,
            s.political_status,
            s.religion_faith,
            s.specialty_information,
            s.honour_style,
            s.houses_condition,
            s.home_condition,
            s.organization,
            s.management_team,
            s.survey_operation,
            s.finance_information,
            s.property_information,
            s.product_serve,
            s.specialty_credentials,
            s.facility_assets,
            s.intangible_assets,
            s.place_of_business,
            s.common_assets,
            s.overview_info,
            s.family_Member,
            s.output_product,
            s.provide_services,
            s.purchase_intention
        FROM sys_user_info s
        where s.user_type = #{userType}
    </select>

    <insert id="insertEducational" parameterType="java.util.Map">
        insert into educational_experience (
            account,
            school_model,
            school_name,
            school_name_status,
            education_model,
            education,
            education_status,
            major_model,
            major,
            major_status,
            is_general_model,
            is_general,
            is_general_status,
            entrance_graduation_time_model,
            entrance_graduation_time,
            entrance_graduation_time_status
        ) values (
            #{account},
            #{school_model},
            #{school_name},
            #{school_name_status},
            #{education_model},
            #{education},
            #{education_status},
            #{major_model},
            #{major},
            #{major_status},
            #{is_general_model},
            #{is_general},
            #{is_general_status},
            #{entrance_graduation_time_model},
            #{entrance_graduation_time},
            #{entrance_graduation_time_status}

        );
    </insert>

    <insert id="insertWork" parameterType="java.util.Map">
      insert into work_experience (
            account,
            work_unit_model,
            work_unit,
            work_unit_status,
            work_position_model,
            work_position,
            work_position_status,
            work_time_model,
            work_time,
            work_time_status,
            work_details_model,
            work_details,
            work_details_status
      ) values (
            #{account},
            #{work_unit_model},
            #{work_unit},
            #{work_unit_status},
            #{work_position_model},
            #{work_position},
            #{work_position_status},
            #{work_time_model},
            #{work_time},
            #{work_time_status},
            #{work_details_model},
            #{work_details},
            #{work_details_status}
      )
    </insert>

    <insert id="insertHonor" parameterType="java.util.Map">
        insert into  honor_info(
        account,
        title,
        introduce,
        file,
        honour_status
        ) values (
         #{account},
         #{name},
         #{content},
         #{honorPictureList},
         #{honour_status}
        )
    </insert>

    <insert id="insertTeam" parameterType="java.util.Map">
        insert into management_team(
            account,
            duties ,
            name,
            education_level,
            id_number,
            phone,
            image,
            image_introduce,
            team_status
        ) values (
            #{account},
            #{job},
            #{name},
            #{educate},
            #{idCard},
            #{phone},
            #{avatar},
            #{intro},
            #{team_status}
        )
    </insert>

    <insert id="insertFinance" parameterType="java.util.Map">
        insert into  finance_info(
            account,
            owner_equity,
            fixed_assets_scale,
            finance_status
        ) values (
          #{account},
          #{interests},
          #{assets},
          #{finance_status}
        )
    </insert>

    <select id="findDepartById" parameterType="java.util.Map" resultType="java.util.Map">
        select id,parent_id as pid,department_name as departmentName,charge_person as leader,phone,function_introduction as introduce from organization where id = #{id}
    </select>

    <select id="findDepartList" parameterType="java.util.Map" resultType="java.util.Map">
        select distinct o.id,o.parent_id as pid,o.department_name as title,o.charge_person as leader,o.phone,o.function_introduction as introduce,o.depart_status as depart_status from organization o left join organization r on o.id= r.parent_id

        where o.account = #{account}
        order by o.id asc
    </select>

    <insert id="insertOrganization" parameterType="java.util.Map">
        insert into organization (
            parent_id,
            department_name,
            charge_person,
            phone,
            function_introduction,
            account,
            depart_status
        ) values (
            #{pid},
            #{departmentName},
            #{leader},
            #{phone},
            #{introduce},
            #{account},
            #{depart_status}
        )
    </insert>

    <update id="updateOrganization" parameterType="java.util.Map">
        update organization set
            department_name = #{departmentName},
            charge_person = #{leader},
            phone = #{phone},
            function_introduction = #{introduce}
        where id  = #{id}

    </update>

    <update id="updateDepartStatus" parameterType="java.util.Map">
        update organization set
            depart_status = #{depart_status}
        where account  = #{account}

    </update>



    <delete id="deleteDepartment" parameterType="java.util.Map">
        delete from organization where id = #{id}
    </delete>


    <delete id="deleteEducation" parameterType="java.util.Map">
        delete from educational_experience where account  = #{account}
    </delete>

    <delete id="deleteWork" parameterType="java.util.Map">
        delete from work_experience where account =#{account}
    </delete>

    <delete id="deleteHonor" parameterType="java.util.Map">
        delete from honor_info where account =#{account}
    </delete>

    <delete id="deleteTeam" parameterType="java.util.Map">
        delete from management_team where account =#{account}
    </delete>

    <delete id="deleteFinance" parameterType="java.util.Map">
        delete from finance_info where account = #{account}
    </delete>

    <select id="getPrivacyInfoByAccount" resultType="java.util.Map" parameterType="java.lang.String" >
       SELECT
            p.id,
            p.account,
            p.image,
            p.`name`,
            p.name_model,
            p.name_status,
            p.sex,
            p.sex_model,
            p.sex_status,
            p.nation,
            p.nation_model,
            p.nation_status,
            p.birthday,
            p.birthday_model,
            p.birthday_status,
            p.profession,
            p.profession_model,
            p.profession_status,
            p.position,
            p.position_model,
            p.position_status,
            p.excel_species,
            p.excel_species_model,
            p.excel_species_status,
            p.phone,
            p.phone_model,
            p.phone_status,
            p.resident,
            p.resident_model,
            p.resident_status,
            p.coordinate_position,
            p.coordinate_position_model,
            p.coordinate_position_status,
            p.postal_code,
            p.postal_code_model,
            p.postal_code_status,
            p.telephone,
            p.telephone_model,
            p.telephone_status,
            p.house_number,
            p.house_number_model,
            p.house_number_status,
            p.update_time,
            p.addr_Detail,
            case when (select c.addr_Detail from certification c where c.user_account =#{account,jdbcType=VARCHAR}) is null then p.addr_Detail_model
            else (select c.addr_Detail from certification c where c.user_account =#{account,jdbcType=VARCHAR}) end as addr_Detail_model,
            p.addr_Detail_status
        FROM privacy_info p

        where account = #{account,jdbcType=VARCHAR}
    </select>

   <select id="findAddrDetail" parameterType="java.lang.String" resultType="java.util.Map">
       select c.addr_Detail from certification c where c.user_account =#{account,jdbcType=VARCHAR}
   </select>

    <delete id="deletePrivacyInfoByAccount" parameterType="java.lang.String" >
        delete from privacy_info
        where account = #{account,jdbcType=VARCHAR}
    </delete>

    <insert id="insertPrivacyInfo" parameterType="java.util.Map" >
        insert into privacy_info(
        account,
        image,
        `name`,
        name_model,
        name_status,
        sex,
        sex_model,
        sex_status,
        nation,
        nation_model,
        nation_status,
        birthday,
        birthday_model,
        birthday_status,
        profession,
        profession_model,
        profession_status,
        `position`,
        position_model,
        position_status,
        excel_species,
        excel_species_model,
        excel_species_status,
        phone,
        phone_model,
        phone_status,
        resident,
        resident_model,
        resident_status,
        coordinate_position,
        coordinate_position_model,
        coordinate_position_status,
        postal_code,
        postal_code_model,
        postal_code_status,
        telephone,
        telephone_model,
        telephone_status,
        house_number,
        house_number_model,
        house_number_status,
        addr_Detail,
        addr_Detail_model,
        addr_Detail_status
        )
        values (
        #{account},
        #{avatar},
        #{userName.name},
        #{userName.model},
        #{userName.status},
        #{sex.name},
        #{sex.model},
        #{sex.status},
        #{ethnicGroup.name},
        #{ethnicGroup.model},
        #{ethnicGroup.status},
        #{birthday.name},
        #{birthday.model},
        #{birthday.status},
        #{profession.name},
        #{profession.model},
        #{profession.status},
        #{professionalTitle.name},
        #{professionalTitle.model},
        #{professionalTitle.status},
        #{species.name},
        #{species.model},
        #{species.status},
        #{phone.name},
        #{phone.model},
        #{phone.status},
        #{addr.name},
        #{addr.model},
        #{addr.status},
        #{coordinatePoint.name},
        #{coordinatePoint.model},
        #{coordinatePoint.status},
        #{postalCode.name},
        #{postalCode.model},
        #{postalCode.status},
        #{tel.name},
        #{tel.model},
        #{tel.status},
        #{number.name},
        #{number.model},
        #{number.status},
        #{addrDetail.name},
        #{addrDetail.model},
        #{addrDetail.status}
        )
    </insert>

    <update id="updatePrivacyInfo" parameterType="java.util.Map" >
        UPDATE privacy_info
        <set>
            <if test="phoneModel !=null and phoneModel != ''">
                phone_model = #{phoneModel},
            </if>
            <if test="residentModel !=null and residentModel != ''">
                resident_model = #{residentModel},
            </if>
        </set>
        where account = #{account,jdbcType=VARCHAR}
    </update>

    <select id="getNetworkInfoByAccount" resultType="java.util.Map" parameterType="java.lang.String" >
        select
        *
        from network_info
        where account = #{account,jdbcType=VARCHAR}
    </select>

    <delete id="deleteNetworkInfoByAccount" parameterType="java.lang.String" >
        delete from network_info
        where account = #{account,jdbcType=VARCHAR}
    </delete>

    <insert id="insertNetworkInfoInfo" parameterType="java.util.Map" >
        insert into network_info(
        account,
        authority,
        nswy_id,
        nswy_id_model,
        qq_number,
        qq_number_model,
        email,
        email_model,
        apply_domain,
        apply_domain_model)
        values (
        #{account},
        #{status},
        #{ID.name},
        #{ID.model},
        #{QQ.name},
        #{QQ.model},
        #{Email.name},
        #{Email.model},
        #{domainName.name},
        #{domainName.model}
        )
    </insert>

    <select id="getPolicyInfoByAccount" resultType="java.util.Map" parameterType="java.lang.String" >
        select
        *
        from political_face
        where account = #{account,jdbcType=VARCHAR}
    </select>

    <delete id="deletePolicyInfoByAccount" parameterType="java.lang.String" >
        delete from political_face
        where account = #{account,jdbcType=VARCHAR}
    </delete>

    <insert id="insertPolicyInfoInfo" parameterType="java.util.Map" >
        insert into political_face(
        account,
        political_face,
        political_face_model,
        political_face_status,
        join_time,
        join_time_model,
        join_time_status)
        values (
        #{account},
        #{policy.name},
        #{policy.model},
        #{policy.status},
        #{joinTime.name},
        #{joinTime.model},
        #{joinTime.status}
        )
    </insert>

    <select id="getReligionInfoByAccount" resultType="java.util.Map" parameterType="java.lang.String" >
        select
        *
        from religious_belief
        where account = #{account,jdbcType=VARCHAR}
    </select>

    <delete id="deleteReligionInfoByAccount" parameterType="java.lang.String" >
        delete from religious_belief
        where account = #{account,jdbcType=VARCHAR}
    </delete>

    <insert id="insertReligionInfoInfo" parameterType="java.util.Map" >
        insert into religious_belief(
        account,
        belief_church,
        belief_church_model,
        belief_church_status)
        values (
        #{account},
        #{religion.name},
        #{religion.model},
        #{religion.status}
        )
    </insert>

    <select id="getManageSurveyByAccount" resultType="java.util.Map" parameterType="java.lang.String" >
        select
        id, staff_scale as scale, industry as industry, last_year_income as turnover, stock_code as JointStockCode,manage_status
        from manage_survey
        where account = #{account,jdbcType=VARCHAR}
    </select>

    <delete id="deleteManageSurveyByAccount" parameterType="java.lang.String" >
        delete from manage_survey
        where account = #{account,jdbcType=VARCHAR}
    </delete>

    <insert id="insertManageSurveyInfo" parameterType="java.util.Map" >
        insert into manage_survey(
        account,
        staff_scale,
        industry,
        last_year_income,
        stock_code,
        manage_status)
        values (
        #{account},
        #{scale},
        #{industry},
        #{turnover},
        #{JointStockCode},
        #{manage_status}
        )
    </insert>

    <select id="getProfessionInfoByAccount" resultType="java.util.Map" parameterType="java.lang.String" >
        select
        id, expert_type as expertType, adept_field as excelField, adept_species as excelSpecies, related_species as relatedSpecies,
        related_industry as relatedIndustries, related_product as relatedGoods, related_service as relatedServices,
        personal_photo, qualification_certificate, honor_certificate,title,expert_status,approve_status as approveStatus
        from expert_info
        where login_account = #{account,jdbcType=VARCHAR}
    </select>

    <delete id="deleteProfessionInfoByAccount" parameterType="java.lang.String" >
        delete from expert_info
        where login_account = #{account,jdbcType=VARCHAR}
    </delete>

    <insert id="insertProfessionInfo" parameterType="java.util.Map" >
        insert into expert_info(
        login_account,
        expert_type,
        adept_field,
        adept_species,
        related_species,
        related_industry,
        related_product,
        related_service,
        personal_photo,
        qualification_certificate,
        honor_certificate,
        title,
        expert_status,
        create_time
        <if test="approveStatus != null and approveStatus != ''">
            , approve_status
        </if>
        )
        values (
        #{account},
        #{expertType},
        #{excelField},
        #{excelSpecies},
        #{relatedSpecies},
        #{relatedIndustries},
        #{relatedGoods},
        #{relatedServices},
        #{personalPicture},
        #{qualificationsPicture},
        #{honorPicture},
        #{title},
        #{expert_status},
        now()
        <if test="approveStatus != null and approveStatus != ''">
            , #{approveStatus}
        </if>
        )
    </insert>

    <select id="getQualificationByAccount" resultType="java.util.Map" parameterType="java.lang.String" >
        select
        id, title as name, brief_introduction as content, qualification_file,professional_status
        from professional_qualification
        where account = #{account,jdbcType=VARCHAR}
    </select>

    <delete id="deleteQualificationByAccount" parameterType="java.lang.String" >
        delete from professional_qualification
        where account = #{account,jdbcType=VARCHAR}
    </delete>

    <insert id="insertQualificationInfo" parameterType="java.util.Map" >
        insert into professional_qualification(
        account,
        title,
        brief_introduction,
        qualification_file,
        professional_status
        ) VALUES
        <if test="list.size() > 0">
            <foreach collection="list" item="item" index="index" separator=",">
                (#{item.account}, #{item.name},#{item.content},#{item.qualificationPictureList},#{item.professional_status})
            </foreach>
        </if>
    </insert>

    <select id="getProductServiceByAccount" resultType="java.util.Map" parameterType="java.lang.String" >
        select
        id, `type` as category, san_pin_yi_biao as product, `name`, related_species as relatedSpecies,
        brand, brief_introduction as introduction, qualification_certificate, image,product_status
        from product_service_info
        where account = #{account,jdbcType=VARCHAR}
    </select>

    <delete id="deleteProductServiceByAccount" parameterType="java.lang.String" >
        delete from product_service_info
        where account = #{account,jdbcType=VARCHAR}
    </delete>

    <insert id="insertProductService" parameterType="java.util.Map" >
        insert into product_service_info(
        account,
        `type`,
        san_pin_yi_biao,
        `name`,
        related_species,
        brand,
        brief_introduction,
        qualification_certificate,
        image,
        product_status
        ) VALUES
        <if test="list.size() > 0">
            <foreach collection="list" item="item" index="index" separator=",">
                (#{item.account}, #{item.category}, #{item.product}, #{item.name}, #{item.relatedSpecies}, #{item.brand}, #{item.introduction}, #{item.certificateList}, #{item.pictureList},#{item.product_status})
            </foreach>
        </if>
    </insert>

    <select id="findFacilityAssets" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT f.id,
        f.name,
        f.assets_type as assetsType,
        f.assets_model as model,
        f.purchase_time as purchaseTime,
        f.assets_picture as assetPicture,
        f.original_value as originalValue,
        f.depreciation as depreciation,
        f.net_asset_value as netAssetValue,
        f.assets_explain  as assetsExplain,
        f.assets_status
        FROM facility_assets f
        where 1=1
        <if test="farm_family_id!='' and farm_family_id !=null">
            and f.farm_family_id = #{farm_family_id}
        </if>
        <if test="account!=null and account!=''">
            and f.account  = #{account}
        </if>
        order  by f.update_time desc
    </select>

    <insert id="insertFacilityAssets" parameterType="java.util.Map">
        insert into facility_assets (
        name,
        assets_type,
        assets_model,
        purchase_time,
        assets_picture,
        original_value,
        depreciation,
        net_asset_value,
        assets_explain,
        account,
        assets_status,
        farm_family_id
        ) value(
        #{name},
        #{assetsType},
        #{model},
        #{purchaseTime},
        #{assetPicture},
        #{originalValue},
        #{depreciation},
        #{netAssetValue},
        #{assetsExplain},
        #{account},
        #{assets_status},
        #{farm_family_id}
        )
    </insert>

    <delete id="deleteFacilityAssets" parameterType="java.util.Map">
        delete from facility_assets where 1=1
        <if test=" farm_family_id!='' and farm_family_id!=null">
        and farm_family_id = #{farm_family_id}
    </if>

        <if test=" account!='' and account!=null">
            and account = #{account}
        </if>
    </delete>

    <select id="findIntangibleAssets" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT i.id,
        i.account,
        i.name,
        i.assets_type as assetsType,
        i.number,
        i.certificate,
        i.valuation,
        i.assets_explain as assetsExplain,
        i.account,
        i.assets_status
        FROM intangible_assets i
        where 1=1
        <if test="farm_family_id!='' and farm_family_id !=null">
            and i.farm_family_id = #{farm_family_id}
        </if>
        <if test="account!=null and account!=''">
            and i.account  = #{account}
        </if>
        order  by i.update_time desc
    </select>

    <insert id="insertIntangibleAssets" parameterType="java.util.Map">
        insert into intangible_assets (
        account,
        name,
        assets_type,
        number,
        certificate,
        valuation,
        assets_explain,
        assets_status,
        farm_family_id
        ) value(
        #{account},
        #{name},
        #{assetsType},
        #{number},
        #{certificate},
        #{valuation},
        #{assetsExplain},
        #{assets_status},
        #{farm_family_id}
        )
    </insert>

    <delete id="deleteIntangibleAssets" parameterType="java.util.Map">
        delete from intangible_assets where 1=1
        <if test=" farm_family_id!='' and farm_family_id!=null">
            and farm_family_id = #{farm_family_id}
        </if>

        <if test=" account!='' and account!=null">
        and account = #{account}
        </if>
    </delete>

    <select id="findPlaceOfBusiness" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
        p.id,
        p.place,
        p.right_type as rightType,
        p.area,
        p.purpose,
        p.certificate_number as certificateNumber,
        p.certificate,
        p.contract,
        p.valuation,
        p.assets_explain as assetsExplain,
        p.account,
        p.assets_status
        FROM place_of_business p
        where 1=1
        <if test="farm_family_id!='' and farm_family_id !=null">
            and p.farm_family_id = #{farm_family_id}
        </if>
        <if test="account!=null and account!=''">
            and p.account  = #{account}
        </if>
        order  by p.update_time desc
    </select>

    <insert id="insertPlaceOfBusiness" parameterType="java.util.Map">
        insert into place_of_business (
        place,
        right_type,
        area,
        purpose,
        certificate_number,
        certificate,
        contract,
        valuation,
        assets_explain,
        account,
        assets_status,
        farm_family_id
        ) value(
        #{place},
        #{rightType},
        #{area},
        #{purpose},
        #{certificateNumber},
        #{certificate},
        #{contract},
        #{valuation},
        #{assetsExplain},
        #{account},
        #{assets_status},
        #{farm_family_id}
        )
    </insert>

    <delete id="deletePlaceOfBusiness" parameterType="java.util.Map">
        delete from place_of_business where 1=1
        <if test=" farm_family_id!='' and farm_family_id!=null">
            and farm_family_id = #{farm_family_id}
        </if>

        <if test=" account!='' and account!=null">
        and account = #{account}
        </if>
    </delete>


    <select id="findCommonAssets" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
        c.id,
        c.name,
        c.valuation,
        c.assets_explain as assetsExplain,
        c.account,
        c.common_status
        FROM common_assets c
        where 1=1
        <if test="account!=null and account!=''">
            and c.account  = #{account}
        </if>
        order  by c.update_time desc
    </select>

    <insert id="insertCommonAssets" parameterType="java.util.Map">
        insert into common_assets (
        name,
        valuation,
        assets_explain,
        account,
        common_status
        ) value(
        #{name},
        #{valuation},
        #{assetsExplain},
        #{account},
        #{common_status}
        )
    </insert>

    <delete id="deleteCommonAssets" parameterType="java.util.Map">
        delete from common_assets where account = #{account}
    </delete>

    <select id="findLoginUser" resultType="java.util.Map" parameterType="java.lang.String" >
        select
        *
        from login_user
        where login_account = #{account,jdbcType=VARCHAR}
    </select>


    <select id="findOverviewInfo" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
        o.id,
        o.editor,
        o.account
        FROM overview_info o
        where 1=1
        <if test="account!=null and account!=''">
            and o.account  = #{account}
        </if>
        order  by o.update_time desc
    </select>

    <insert id="insertOverviewInfo" parameterType="java.util.Map">
        insert into overview_info (

        editor,
        account
        ) value(

        #{editor},
        #{account}
        )
    </insert>

    <delete id="deleteOverviewInfo" parameterType="java.util.Map">
        delete from overview_info where account = #{account}
    </delete>

    <select id="findPrivacyInfo" resultType="java.util.Map" parameterType="java.util.Map" >
        SELECT
        p.image,
        p.name_model as name,
        p.year_id as yearId,
        p.template_id as templateId
        FROM privacy_info p
        where p.account = #{account}
        <if test="templateId!='' and templateId!=null">
            and p.template_id = #{templateId}
        </if>
        <if test="yearId!='' and yearId!=null">
            and p.year_id = #{yearId}
        </if>
    </select>


</mapper>